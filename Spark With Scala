Average ratings of all the movies
_________________________________________________________________________________

scala> val textRdd = sc.textFile("ratings.csv")
18/08/07 20:35:13 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
textRdd: org.apache.spark.rdd.RDD[String] = ratings.csv MapPartitionsRDD[1] at textFile at <console>:24

scala> val df = spark.read.format("csv").option("header","true").load("ratings.csv")
df: org.apache.spark.sql.DataFrame = [userId: string, movieId: string ... 2 more fields]

scala> df.select(mean(df("rating"))).show()
+-----------------+
|      avg(rating)|
+-----------------+
|3.543608255669773|
+-----------------+



Separate count of males and females from (users.dat) file
_________________________________________________________________________________________


vi student.scala

val data = sc.textFile("users.dat")
case class CC1(id:Int,gender:String,inc:Int,age:Int,count:String)
val textRdd = data.map(line => line.split("::"))
val allData = textRdd.map(p=>CC1(p(0).trim.toInt,p(1).trim.toString,p(2).trim.toInt,p(3).trim.toInt,p(4).trim.toString))
val allDf = allData.toDF()
val t1 = allDf.groupBy(allDf("gender")).count().show()


Output:
:load student.scala
Loading student.scala...
18/08/11 10:54:41 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
data: org.apache.spark.rdd.RDD[String] = users.dat MapPartitionsRDD[1] at textFile at <console>:24
defined class CC1
textRdd: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[2] at map at <console>:26
allData: org.apache.spark.rdd.RDD[CC1] = MapPartitionsRDD[3] at map at <console>:30
allDf: org.apache.spark.sql.DataFrame = [id: int, gender: string ... 3 more fields]
+------+-----+                                                                  
|gender|count|
+------+-----+
|     F| 1709|
|     M| 4331|
+------+-----+

t1: Unit = ()


Print only those comedy movie names that are released in the year 2000
___________________________________________________________________________________________________________


vi student2.scala

val df = spark.read.format("csv").option("header","true").load("movies.csv")
df.first()
val df2 = df.filter(col("title").contains("2000") && col("genres").contains("Comedy"))
df2.show

Output:
:load student2.scala
Loading student2.scala...
18/08/11 11:00:33 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
df: org.apache.spark.sql.DataFrame = [movieId: string, title: string ... 1 more field]
res0: org.apache.spark.sql.Row = [1,Toy Story (1995),Adventure|Animation|Children|Comedy|Fantasy]
df2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [movieId: string, title: string ... 1 more field]
+-------+--------------------+--------------------+
|movieId|               title|              genres|
+-------+--------------------+--------------------+
|   1772|Blues Brothers 20...|Action|Comedy|Mus...|
|   3177|  Next Friday (2000)|              Comedy|
|   3225|  Down to You (2000)|      Comedy|Romance|
|   3239|Isn't She Great? ...|              Comedy|
|   3273|     Scream 3 (2000)|Comedy|Horror|Mys...|
|   3276|      Gun Shy (2000)|              Comedy|
|   3286|     Snow Day (2000)|              Comedy|
|   3299|   Hanging Up (2000)|        Comedy|Drama|
|   3301|Whole Nine Yards,...|        Comedy|Crime|
|   3317|  Wonder Boys (2000)|        Comedy|Drama|
|   3324|Drowning Mona (2000)|              Comedy|
|   3325|Next Best Thing, ...|        Comedy|Drama|
|   3326|What Planet Are Y...|       Comedy|Sci-Fi|
|   3454|Whatever It Takes...|      Comedy|Romance|
|   3481|High Fidelity (2000)|Comedy|Drama|Romance|
|   3511|Ready to Rumble (...|              Comedy|
|   3515|  Me Myself I (2000)|      Comedy|Romance|
|   3536|Keeping the Faith...|Comedy|Drama|Romance|
|   3537|Where the Money I...|        Comedy|Drama|
|   3564|Flintstones in Vi...|     Children|Comedy|
+-------+--------------------+--------------------+
only showing top 20 rows



Find those movie id's from ratings.dat which have not got ratings below 4 by an user
______________________________________________________________________________________________


vi query.scala

val df = spark.read.format("csv").option("header","true").load("ratings.csv")
val df2 = df.filter(col("rating") >= 4)
df2.show




Output
:load query.scala
Loading query.scala...
18/08/11 11:04:00 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
df: org.apache.spark.sql.DataFrame = [userId: string, movieId: string ... 2 more fields]
df2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userId: string, movieId: string ... 2 more fields]
+------+-------+------+----------+
|userId|movieId|rating| timestamp|
+------+-------+------+----------+
|     1|   1172|   4.0|1260759205|
|     1|   1953|   4.0|1260759191|
|     1|   2105|   4.0|1260759139|
|     2|     10|   4.0| 835355493|
|     2|     17|   5.0| 835355681|
|     2|     39|   5.0| 835355604|
|     2|     47|   4.0| 835355552|
|     2|     50|   4.0| 835355586|
|     2|    110|   4.0| 835355532|
|     2|    150|   5.0| 835355395|
|     2|    153|   4.0| 835355441|
|     2|    222|   5.0| 835355840|
|     2|    253|   4.0| 835355511|
|     2|    261|   4.0| 835355681|
|     2|    265|   5.0| 835355697|
|     2|    266|   5.0| 835355586|
|     2|    273|   4.0| 835355779|
|     2|    296|   4.0| 835355395|
|     2|    314|   4.0| 835356044|
|     2|    349|   4.0| 835355441|
+------+-------+------+----------+
only showing top 20 rows


Read the movies.dat file and transform into RDD and sort the movie name and finally store them into hdfs in below specifications:
1.Output file should have movie title and genre
2.Movie title and genre should be delimited by '*$' sign
3.Output should be stored in a single file

____________________________________________________________________________________________________________________________________________________


vi example.scala

val df = spark.read.format("csv").option("header","true").load("movies.csv")
df.show
val df2 = df.sort(desc("title"))
df2.show
val df3 = df2.drop("movieId")
df3.show
df3.write.format("csv").option("delimiter","$").option("header","true").save("/user/training/spark/")





Output
:load example.scala
Loading example.scala...
18/08/11 11:14:45 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
df: org.apache.spark.sql.DataFrame = [movieId: string, title: string ... 1 more field]
+-------+--------------------+--------------------+
|movieId|               title|              genres|
+-------+--------------------+--------------------+
|      1|    Toy Story (1995)|Adventure|Animati...|
|      2|      Jumanji (1995)|Adventure|Childre...|
|      3|Grumpier Old Men ...|      Comedy|Romance|
|      4|Waiting to Exhale...|Comedy|Drama|Romance|
|      5|Father of the Bri...|              Comedy|
|      6|         Heat (1995)|Action|Crime|Thri...|
|      7|      Sabrina (1995)|      Comedy|Romance|
|      8| Tom and Huck (1995)|  Adventure|Children|
|      9| Sudden Death (1995)|              Action|
|     10|    GoldenEye (1995)|Action|Adventure|...|
|     11|American Presiden...|Comedy|Drama|Romance|
|     12|Dracula: Dead and...|       Comedy|Horror|
|     13|        Balto (1995)|Adventure|Animati...|
|     14|        Nixon (1995)|               Drama|
|     15|Cutthroat Island ...|Action|Adventure|...|
|     16|       Casino (1995)|         Crime|Drama|
|     17|Sense and Sensibi...|       Drama|Romance|
|     18|   Four Rooms (1995)|              Comedy|
|     19|Ace Ventura: When...|              Comedy|
|     20|  Money Train (1995)|Action|Comedy|Cri...|
+-------+--------------------+--------------------+
only showing top 20 rows

df2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [movieId: string, title: string ... 1 more field]
+-------+--------------------+--------------------+
|movieId|               title|              genres|
+-------+--------------------+--------------------+
| 147426| İtirazım Var (2014)|  Action|Crime|Drama|
|   5560|À nous la liberté...|      Comedy|Musical|
|   2478|¡Three Amigos! (1...|      Comedy|Western|
|  33158|xXx: State of the...|Action|Crime|Thri...|
|   5507|          xXx (2002)|Action|Crime|Thri...|
|  51127|loudQUIETloud: A ...|         Documentary|
|   2600|     eXistenZ (1999)|Action|Sci-Fi|Thr...|
|  57274|        [REC] (2007)|Drama|Horror|Thri...|
| 116207|         Zulu (2013)|Crime|Drama|Thriller|
|   5899|         Zulu (1964)|    Action|Drama|War|
|   4696|Zorro, the Gay Bl...|              Comedy|
|  72647| Zorn's Lemma (1970)|               Drama|
|   7771|Zorba the Greek (...|     Adventure|Drama|
| 152081|     Zootopia (2016)|Action|Adventure|...|
|   5917|    Zoot Suit (1981)|       Drama|Musical|
|  47384|         Zoom (2006)|Adventure|Comedy|...|
| 148888|  Zoolander 2 (2016)|              Comedy|
|   4816|    Zoolander (2001)|              Comedy|
|  71535|   Zombieland (2009)|Action|Comedy|Horror|
|   5413|Zombie Holocaust ...|              Horror|
+-------+--------------------+--------------------+
only showing top 20 rows

df3: org.apache.spark.sql.DataFrame = [title: string, genres: string]
+--------------------+--------------------+
|               title|              genres|
+--------------------+--------------------+
| İtirazım Var (2014)|  Action|Crime|Drama|
|À nous la liberté...|      Comedy|Musical|
|¡Three Amigos! (1...|      Comedy|Western|
|xXx: State of the...|Action|Crime|Thri...|
|          xXx (2002)|Action|Crime|Thri...|
|loudQUIETloud: A ...|         Documentary|
|     eXistenZ (1999)|Action|Sci-Fi|Thr...|
|        [REC] (2007)|Drama|Horror|Thri...|
|         Zulu (2013)|Crime|Drama|Thriller|
|         Zulu (1964)|    Action|Drama|War|
|Zorro, the Gay Bl...|              Comedy|
| Zorn's Lemma (1970)|               Drama|
|Zorba the Greek (...|     Adventure|Drama|
|     Zootopia (2016)|Action|Adventure|...|
|    Zoot Suit (1981)|       Drama|Musical|
|         Zoom (2006)|Adventure|Comedy|...|
|  Zoolander 2 (2016)|              Comedy|
|    Zoolander (2001)|              Comedy|
|   Zombieland (2009)|Action|Comedy|Horror|
|Zombie Holocaust ...|              Horror|
+--------------------+--------------------+
only showing top 20 rows

18/08/11 11:15:01 ERROR FileOutputCommitter: Mkdirs failed to create file:/user/training/spark/_temporary/0
[Stage 7:>                                                        (0 + 1) / 200]18/08/11 11:15:02 ERROR Executor: Exception in task 0.0 in stage 7.0 (TID 7)



Longest movie from movies.dat
_________________________________________________________________

scala> val textRdd = sc.textFile("movies.csv")
18/08/07 08:54:14 WARN SizeEstimator: Failed to check whether UseCompressedOops is set; assuming yes
textRdd: org.apache.spark.rdd.RDD[String] = movies.csv MapPartitionsRDD[1] at textFile at <console>:24

scala> val header = textRdd.first()
header: String = movieId,title,genres

scala> val no_header = textRdd.filter(line => !line.equals(header))
no_header: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[2] at filter at <console>:28


res0: Int = 1

scala> no_header.collect
res1: Array[String] = Array(1,Toy Story (1995),Adventure|Animation|Children|Comedy|Fantasy, 2,Jumanji (1995),Adventure|Children|Fantasy, 3,Grumpier Old Men (1995),Comedy|Romance, 4,Waiting to Exhale (1995),Comedy|Drama|Romance, 5,Father of the Bride Part II (1995),Comedy, 6,Heat (1995),Action|Crime|Thriller, 7,Sabrina (1995),Comedy|Romance, 8,Tom and Huck (1995),Adventure|Children, 9,Sudden Death (1995),Action, 10,GoldenEye (1995),Action|Adventure|Thriller, 11,"American President, The (1995)",Comedy|Drama|Romance, 12,Dracula: Dead and Loving It (1995),Comedy|Horror, 13,Balto (1995),Adventure|Animation|Children, 14,Nixon (1995),Drama, 15,Cutthroat Island (1995),Action|Adventure|Romance, 16,Casino (1995),Crime|Drama, 17,Sense and Sensibility (1995),Drama|Romance, 18,Four Rooms (1995),Come...

scala> val length = no_header.map(x=>x.split(',')).map(x=>(x(1).length))
length: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[4] at map at <console>:30

scala> println(length.max())
158






